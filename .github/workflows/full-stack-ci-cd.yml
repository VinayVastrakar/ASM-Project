name: Full Stack CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '18'
  MAVEN_VERSION: '3.9.6'

jobs:
  backend-build-and-test:
    name: Backend Build and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('Asset-Management-Application/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run backend tests
      working-directory: Asset-Management-Application
      run: mvn -B test
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        # Required environment variables for tests
        JWT_SECRET: test-jwt-secret-key-for-testing-only
        JWT_EXPIRATION: 3600000
        JWT_REFRESH_EXPIRATION: 7200000
        MAIL_HOST: localhost
        MAIL_PORT: 25
        MAIL_USERNAME: test@example.com
        MAIL_PASSWORD: test
        BREVO_ENABLED: false
        BREVO_API_KEY: test-key
        BREVO_SENDER_EMAIL: test@example.com
        BREVO_SENDER_NAME: Test App
        CLOUDINARY_CLOUD_NAME: test-cloud
        CLOUDINARY_API_KEY: test-key
        CLOUDINARY_API_SECRET: test-secret
        GOOGLE_CLIENT_ID: test-google-client-id
        CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080

    - name: Build backend application
      working-directory: Asset-Management-Application
      run: mvn -B clean package -DskipTests

    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: Asset-Management-Application/target/*.jar

  frontend-build-and-test:
    name: Frontend Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: frontend
      run: npm test -- --watchAll=false --coverage --passWithNoTests

    - name: Build frontend application
      working-directory: frontend
      run: npm run build

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-build-and-test, frontend-build-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Run OWASP Dependency Check (Backend) via CLI
      run: |
        curl -sL https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip -o dc.zip
        unzip -q dc.zip
        DC_DIR=$(find . -type d -name "dependency-check*" -maxdepth 1 | head -n 1)
        chmod +x "$DC_DIR/bin/dependency-check.sh"
        "$DC_DIR/bin/dependency-check.sh" \
          --project "Asset-Management-Application" \
          --scan "Asset-Management-Application" \
          --format "HTML" \
          --out "backend-reports"

    - name: Run npm audit (Frontend)
      working-directory: frontend
      run: npm audit --json > npm-audit.json
      # run: npm audit --audit-level=moderate

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          backend-reports/
          frontend/npm-audit.json

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-build-and-test, frontend-build-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: Asset-Management-Application/target/

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./Asset-Management-Application
        push: false
        tags: asset-management-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: asset-management-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload Docker images
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: |
          Asset-Management-Application/target/*.jar
          frontend/build/

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: docker-images
        path: ./

    - name: Deploy to development environment
      run: |
        echo "Deploying full stack to development environment..."
        # Add your deployment commands here
        # Example: Deploy to AWS, Azure, or other cloud platform
        echo "Full stack application deployed successfully!"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: docker-images
        path: ./

    - name: Deploy to production environment
      run: |
        echo "Deploying full stack to production environment..."
        # Add your production deployment commands here
        # Example: Deploy to AWS, Azure, or other cloud platform
        echo "Full stack application deployed to production successfully!"

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ Full Stack CI/CD Pipeline completed successfully!"
        # Add notification logic (Slack, email, etc.)
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Full Stack CI/CD Pipeline failed!"
        # Add notification logic (Slack, email, etc.) 