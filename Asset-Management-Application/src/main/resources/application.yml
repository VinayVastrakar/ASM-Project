spring:
  application:
    name: Assets-Management-App
  dotenv:
    enabled: true
    filename: .env
    path: ./Asset-Management-Application
    system-properties: true
  
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://your-db-host:5432/your-database}
    username: ${SPRING_DATASOURCE_USERNAME:your-db-username}
    password: ${SPRING_DATASOURCE_PASSWORD:your-db-password}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    # show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

# Brevo API Configuration
brevo:
  enabled: ${BREVO_ENABLED:true}
  api:
    key: ${BREVO_API_KEY}
  sender:
    email: ${BREVO_SENDER_EMAIL}
    name: ${BREVO_SENDER_NAME:Asset Management App}
  servlet:
    multipart:
      enabled: true
      max-file-size: ${SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE:10MB}
      max-request-size: ${SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE:10MB}
  mvc:
    contentnegotiation:
      favor-parameter: true

# JWT Configuration
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:43200000}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:172800000}

cloudinary:
  cloud-name: ${CLOUDINARY_CLOUD_NAME}
  api-key: ${CLOUDINARY_API_KEY}
  api-secret: ${CLOUDINARY_API_SECRET}
# Google OAuth Configuration
google:
  client:
    id: ${GOOGLE_CLIENT_ID}

management:
  endpoints:
    web:
      exposure:
        include: health   # expose only the health endpoint
  endpoint:
    health:
      show-details: always   # show DB + disk status in health check
  health:
    mail:
      enabled: false # disable mail health check (SMTP blocked on Render free tier)

# Logging Configuration
logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:INFO}
    com.example.Assets.Management.App: ${LOGGING_LEVEL_COM_EXAMPLE_ASSETS_MANAGEMENT_APP:DEBUG}

# Server Configuration
server:
  port: ${SERVER_PORT:8080}

# CORS Configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}